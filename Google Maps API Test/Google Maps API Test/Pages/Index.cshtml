@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    List<string> Stops = new List<string>();
}
<style>
    #map {
        height: 100%;
    }
    /*MAX VALUES:
    85vh
    87vw*/

    .TripID
    {
        height: 15%;
        width: 60%;
        float: left;
    }

    .Information {
        height: 15%;
        width: 40%;
        float: left;
    }

    .GMap {
        height: 70%;
        width: 65%;
        float: left;
    }

    .Settings {
        height: 70%;
        width: 35%;
        float: left;
    }

    .Stats {
        height: 15%;
        width: 100%;
        float: left;
    }

    .stop-box {
        height: 46%;
        width: 98%;
        position: absolute;
        box-shadow: inset -1px 9px 40px -12px #807f7d;

        -ms-overflow-style: none; /* for Internet Explorer, Edge */
        scrollbar-width: none; /* for Firefox */    
        overflow-y: scroll; 
    }

    .stop-box::-webkit-scrollbar {
        display: none; /* for Chrome, Safari, and Opera */
    }

    .stop-box li.over .draggable {
        background-color: #eaeaea;
    }


    .draggable-item .number {
        display: flex;
        justify-content: center;
        background-color: #807f7d;
        align-items: center;
        text-align: center;

        -ms-overflow-style: none; /* for Internet Explorer, Edge */
        scrollbar-width: none; /* for Firefox */     
        overflow: scroll;
    }
    .draggable-item::-webkit-scrollbar {
        display: none; /* for Chrome, Safari, and Opera */
    }

    .delete {
        display: none;
    }

    .fill:hover .delete {
        display: block;
        position: absolute;
        display: flex;
        justify-content: center;
        align-items: center;
        border: 2px solid white;
        border-radius: 50%;
        height: 35px;
        width: 35px;
        background-color: red;
        top: -15px;
        right: -15px;
        font-size: 20px;
        font-weight: 600;
        color: white;
        z-index: 10;
        box-shadow: rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px;
}

</style>

<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
</head>

<div class="container border" style="height:85vh; width: 87vw">
    <div class="TripID" style="border: 3px solid #000000; border-right:none; border-bottom: none;">
    </div>
    <div class="Information" style="border: 3px solid #000000; border-bottom: none;">Information</div>
    <div class="GMap" style="border: 3px solid #000000;">
        <div id="map"></div>
    </div>
    <div class="Settings" style="border: 3px solid #000000; border-left:none; position: relative;">
        <label class="text-danger"></label>
        <div style="width: 98%; height: 25%; position: absolute; margin: 1%; text-align: center; top: 0;">
            <form>
                <input type="text" id="from" placeholder="Origin" class="form-control">
                <input type="text" id="to" placeholder="Destination" class="form-control">
            </form>
        </div>
        <u1 class="stop-box" style="top: 26%; right: 1%; overflow-y: auto; padding: 1% 1% 1% 1%; justify-content: center;" id="stopContainer">

        </u1>
        <div style="width:98%; height:25%; position: absolute; bottom: 0; position: absolute; margin: 1%; text-align: center;" class="map-commands">
            <button class="btn btn-info " style="height: 48%; width: 48%" onclick="AddLocationMarkers();">Destination / Origin</button>
            <button class="btn btn-info " style="height: 48%; width: 48%" onclick="addAllMarkers();">See Markers</button>
            <button class="btn btn-info " style="height: 48%; width: 48%" onclick="RemoveMarkers();">Remove Markers!</button>
            <button class="btn btn-info " style="height: 48%; width: 48%" onclick="DisplayDirection();">Route!</button>
        </div>
    </div>
    <div class="Stats" style="border: 3px solid #000000; border-top: none;">
        <h1>Statistics</h1>
        <div id="DistanceDurationStat">Nothing to display yet, start a route to see more information regarding your trip!</div>
    </div>
</div>

<script>
    var stops = [];

    // BIS HCMC's lat/lng
    var DefaultSpot = { lat: 10.810349612117006, lng: 106.73039260883725 };

    var Origin;
    var autocomplete1;

    var Destination;
    var autocomplete2;

    var map;
    var markers = [];
    var markersSpecial = [];

    var direcService;
    var direcRenderer;
    var geocoder;

    // Initial Call for Everything
    function initMap() {

        direcService = new google.maps.DirectionsService();
        direcRenderer = new google.maps.DirectionsRenderer();
        geocoder = new google.maps.Geocoder();
        const waypts = [];
        map = new google.maps.Map(document.getElementById('map'), {
            center: DefaultSpot,
            zoom: 16
        });

        createRequest();

        // Get User's Current Location
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude,
                    };
                    map.setCenter(pos);
                },
                () => {
                    handleLocationError(true, infoWindow, map.getCenter());
                },
            );
        } else {
            // Browser doesn't support Geolocation
            handleLocationError(false, infoWindow, map.getCenter());
        }
        direcRenderer.setMap(map);
        google.maps.event.addListener(map, "click", function (event) {
            this.setOptions({ scrollwheel: true })
        });

        const options = {
            fields: ["formatted_address", "geometry", "name"],
            strictBounds: false,
            types: ["establishment"],
        };


        Origin = document.getElementById("from");
        autocomplete1 = new google.maps.places.Autocomplete(Origin, options);

        Destination = document.getElementById("to");
        autocomplete2 = new google.maps.places.Autocomplete(Destination, options);

        autocomplete1.bindTo("bounds", map);
        autocomplete2.bindTo("bounds", map);

        // Location Validation
        Origin.addEventListener("change", function() {
            Origin.value = "";
        });
        Destination.addEventListener("change", function () {
            Destination.value = "";
        });
    }

    var listItems = [];
    var addressItems = [];
    var autocompleteStop;
    var StopField;
    const listContainer = document.getElementById("stopContainer");
    
    function addStop() {
        const inputWindow = document.getElementById("addStop");
        if (inputWindow.value != "") {
            var StopPlace = autocompleteStop.getPlace();
            var StopLatLng = [StopPlace.geometry.location.lat(), StopPlace.geometry.location.lng()];
            addressItems.push(inputWindow.value);
            stops.push(StopLatLng);

            for (var x = 0; x < listItems.length; x++) {
                listItems[x].remove();
            }
            NameTable();
        }
    }

    function remStop(index) {
        direcRenderer.setDirections({ routes: [] });
        RemoveMarkers();

        stops[index] = [];
        addressItems[index] = "";
        for (var x = 0; x < listItems.length; x++) {
            listItems[x].remove();
        }
        console.log(stops);
        console.log(addressItems);
        NameTable();
    }

    function addAutoComplete() {
        const option = {
            fields: ["formatted_address", "geometry", "name"],
            strictBounds: false,
            types: ["establishment"],
        };

        const AddStopWindow = document.getElementById("addStop");
        autocompleteStop = new google.maps.places.Autocomplete(AddStopWindow, option);
        autocompleteStop.bindTo("bounds", map);

        AddStopWindow.addEventListener("change", function() {
            AddStopWindow.value = "";
        });
    }

    // Add to the stop tables with existing data entries
    function NameTable() {
        if (StopField != undefined) {
            StopField.remove();
        }

        listItems = [];
        for (var counter = 0; counter < stops.length; counter++) {
            if (stops[counter] != undefined && stops[counter] != "" && stops[counter] != []) {
                const listItem = document.createElement('li');

                // Position Counter
                listItem.setAttribute('position', counter);

                // Visuals
                listItem.setAttribute('style', "width: 100%; height: 25%; border-bottom: 2px solid #000000; cursor: pointer; list-style-type: none");
                listItem.setAttribute("draggable", "true");
                listItem.setAttribute("class", "draggable-instance");

                listItem.innerHTML =
                    `<span class="number" style="width: 23%; height: 100%; float: right; text-align: center; border-left: 2px solid #000000"><button class="number" style="width:100%; height: 100%;" onclick="remStop(${counter});"><i class="bi bi-trash"></i></button></span>
                <div class="draggable-item" style="overflow: auto; text-align: center; width: 75%; height: 100%; float: right;">
                    <nobr><span class="draggable-item" style=" width: 100%; height: 100%;">${addressItems[counter]}</span></nobr>
                </div>
                `;

                listItems.push(listItem);
                listContainer.appendChild(listItem);
            }
        }
        const addStopItem = document.createElement('div');
        addStopItem.innerHTML = '<button class="btn btn-info "style="height: 25%; width: 24%; float: right; text-align: center;" onclick="addStop();">Add</button><input type="text" id="addStop" placeholder="Add a new Stop" class="form-control" style="width: 74%; height: 25%;">';

        listContainer.appendChild(addStopItem);
        StopField = addStopItem;

        addAutoComplete();
        DragEventListeners();
    }

    // ALL DRAGGING CAPABILITY FUNCTIONS HERE!
    let dragStartIndex;
    let dragEndIndex;

    function dragStart() {
        dragStartIndex = +this.closest('li').getAttribute('position');
    }

    function dragEnter() {
        this.classList.add('over');
    }

    function dragLeave() {
        this.classList.remove('over');
    }


    function swapItems(fromIndex, toIndex) {
        // Getting real index | When a deletion occurs, the listItems array deletes the instance but the other arrays
        // keep it leading to problems.  Solved by finding the real index for listItems
        var tempArray = [];
        console.log(stops);
        for (var y = 0; y < addressItems.length; y++) {
            if (addressItems[y] != "") {
                tempArray.push(y);
            }
        }
        var realFIndex;
        var realTIndex;
        for (var z = 0; z < tempArray.length; z++) {
            if (tempArray[z] == fromIndex) {
                realFIndex = z;
            }
            if (tempArray[z] == toIndex) {
                realTIndex = z;
            }
        }

        var itemOne = listItems[realFIndex].querySelector('.draggable-item');
        var itemTwo = listItems[realTIndex].querySelector('.draggable-item');

        var coordOne = stops[fromIndex];
        var coordTwo = stops[toIndex];

        var addressOne = addressItems[fromIndex];
        var addressTwo = addressItems[toIndex];

        addressItems[fromIndex] = addressTwo;
        addressItems[toIndex] = addressOne

        stops[fromIndex] = coordTwo;
        stops[toIndex] = coordOne;

        listItems[realFIndex].appendChild(itemTwo);
        listItems[realTIndex].appendChild(itemOne);
    }

    function dragOver(e) {
        e.preventDefault();
    }

    function dragDrop(e) {
        e.preventDefault();

        dragEndIndex = +this.closest('li').getAttribute('position');
        swapItems(dragStartIndex, dragEndIndex);

        this.classList.remove('over');
    }

    var draggables;
    var dragListItems;
    function DragEventListeners() {
        draggables = document.querySelectorAll('.draggable-instance');
        dragListItems = document.querySelectorAll('.stop-box li');

        draggables.forEach(draggable => {
            draggable.addEventListener('dragstart', dragStart);
        });

        dragListItems.forEach(item => {
            item.addEventListener('dragover', dragOver);
            item.addEventListener('drop', dragDrop);
            item.addEventListener('dragenter', dragEnter);
            item.addEventListener('dragleave', dragLeave);
        });
    }


    //////////////////////////////////////////

    // Reverse Geo-coding API calls
    function createRequest() {
        if (stops.length == 0) {
            NameTable();
        } else {
            for (var counter = 0; counter < stops.length; counter++) {
                var latlng = new google.maps.LatLng(stops[counter][0], stops[counter][1]);
                geocoder.geocode({ location: latlng }).then((response, status) => {
                    addressItems.push(response.results[0].formatted_address);
                    if (addressItems.length == stops.length) {
                        NameTable();
                    }
                });
            }
        }
    }

    // Adding all markers (Origin, Destination, stops)
    function addAllMarkers() {
        RemoveMarkers();
        AddLocationMarkers(false);
        var infowindow = new google.maps.InfoWindow();
        var marker, i;

        var tempArray = [];
        for (var y = 0; y < addressItems.length; y++) {
            if (addressItems[y] != "") {
                tempArray.push(y);
            }
        }

        for (i = 0; i < tempArray.length; i++) {
            marker = new google.maps.Marker({
                position: new google.maps.LatLng(stops[tempArray[i]][0], stops[tempArray[i]][1]),
                map: map
            });
            google.maps.event.addListener(marker, 'click', (function (marker, i) {
                return function () {
                    infowindow.setContent("Stop " + (i+1));
                    infowindow.open(map, marker);
                }
            })(marker, i));
            markers.push(marker);
        }
    }

    // Removes all markers from the map
    function RemoveMarkers() {
        direcRenderer.setDirections({ routes: [] });
        for (let i = 0; i < markers.length; i++) {
            markers[i].setMap(null);
        }
        for (let j = 0; j < markersSpecial.length; j++) {
            markersSpecial[j].setMap(null);
        }
        markers = [];
        markersSpecial = [];
    }

    // Adds only Origin/Destination markers
    function AddLocationMarkers(exclusive = true) {
        if (exclusive) {
            RemoveMarkers();
        }
        direcRenderer.setDirections({ routes: [] });
        var OriginValue = document.getElementById("from").value;
        var DestinationValue = document.getElementById("to").value;

        if (DestinationValue == "" || OriginValue == "") { // Validation Checks
            console.log("Fail, Empty Values");
            return; // Fail
        } else if (DestinationValue == OriginValue) {
            console.log("Fail, Matching Values");
            return;
        } else { // If valid
            var infowindow = new google.maps.InfoWindow();

            var OriginPlace = autocomplete1.getPlace();
            var DestinationPlace = autocomplete2.getPlace();

            var OriginMarker = new google.maps.Marker({
                position: new google.maps.LatLng(OriginPlace.geometry.location.lat(), OriginPlace.geometry.location.lng()),
                map: map
            });
            google.maps.event.addListener(OriginMarker, 'click', function () {
                infowindow.setContent("Origin");
                infowindow.open(map, OriginMarker);
            });
            markersSpecial.push(OriginMarker);

            var DestinationMarker = new google.maps.Marker({
                position: new google.maps.LatLng(DestinationPlace.geometry.location.lat(), DestinationPlace.geometry.location.lng()),
                map: map
            });
            google.maps.event.addListener(DestinationMarker, 'click', function () {
                infowindow.setContent("Destination");
                infowindow.open(map, DestinationMarker);
            });
            markersSpecial.push(DestinationMarker);
        }
    }

    // Creates a mapping route and displays it
    function DisplayDirection() {
        RemoveMarkers();
        var OriginValue = document.getElementById("from").value;
        var DestinationValue = document.getElementById("to").value;

        if (DestinationValue == "" || OriginValue == "") { // Validation Checks
            console.log("Fail, Empty Values");
            return; // Fail
        } else if (DestinationValue == OriginValue) {
            console.log("Fail, Matching Values");
            return;
        } else {
            var waypts = [];
            var StopLatLng = [];
            for (let i = 0; i < addressItems.length; i++) {
                if (addressItems[i] != "") {
                    StopLatLng.push([stops[i][0], stops[i][1]]);
                    waypts.push({
                        location: new google.maps.LatLng(stops[i][0], stops[i][1]),
                        stopover: true,
                    });
                }
            }

            var request = {
                origin: OriginValue,
                destination: DestinationValue,
                waypoints: waypts,
                optimizeWaypoints: false,
                travelMode: 'DRIVING'
            };
            direcService.route(request, function (response, status) {
                if (status == 'OK') {
                    var DistanceDurationString = ("Distance: " + response.routes[0].legs[0].distance.text + "\n" + "Duration: " + response.routes[0].legs[0].duration.text);
                    document.getElementById("DistanceDurationStat").innerHTML = DistanceDurationString;
                    console.log(response);
                    direcRenderer.setDirections(response);
                }
            });
        }
    }

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDPGjRnXaVKXXSJaOH8S5QJ4MKXKRH8wog&libraries=places&callback=initMap" async defer></script>